---
title: "R Coding Exercise"
editor: 
  markdown: 
    wrap: sentence
---

### Loading and checking data:

First we begin by installing necessary packages for this analysis if we haven't already.
Once the package installs, we need to load the package using library function.
We need to load the packages before use, every time we open R.

```{r}
install.packages("dslabs", repos = "https://cran.rstudio.com/")
library("dslabs") #load the package.
library("tidyverse") #This is a good package for data processing tasks and since I have it installed, I only had to load it. 
library(ggplot2) #use to generate plots. 
library(dplyr) #load this package if you want to use %>%
```

Now we are going to look into help file for gapminder data.

```{r}
help("gapminder")
```

We use the following function inorder to get an overview of the data structure.

```{r}
str(gapminder) #get an over view of data structure.
```

We are now going to look into the summary of the data.

```{r}
summary(gapminder)
```

Let us determine the type of object "gapminder" is.

```{r}
class(gapminder)
```

### Processing Data:

For this part of data prcessing we want to focus on Africa only so we will create an objest called africadata that holds all the data for Africa.

```{r}
africadata <- filter(gapminder, continent == "Africa")
```

Now let's check africadata.

```{r}
print(africadata) #view the entire dataset.
str(africadata) #get an overview the data structure.
summary(africadata) #get a summary of data.
dim(africadata) #check the dimensions of data.
```

I want to create a new dataset called inf.mort_lf.exp that only includes two columns infant_mortality and life_expectancy, using africadata.

```{r}
inf.mort_lf.exp <- africadata %>% 
  select("infant_mortality", "life_expectancy") #create a new dataset from africadata that only contains two columns namely, infant_mortality and life_expectancy. 
str(inf.mort_lf.exp) #get an overview of the data structure.
summary(inf.mort_lf.exp) #get a summary of the data.
nrow(inf.mort_lf.exp) #check number of row/observations. 
dim(inf.mort_lf.exp) #check the dimensions of the data.
```

I want to create another dataset called pop_lf.exp that only includes population and life_expectancy from africadat.

```{r}
pop_lf.exp <- africadata %>%
  select("population", "life_expectancy") #create a new dataset from africadata with only two columns namely, population and life_expectancy. 

str(pop_lf.exp) #get an overview of the data structure.
summary(pop_lf.exp) #get a summary of the data.
dim(pop_lf.exp) #check the dimnensions of the data. 
```

### Plotting data:

Now we can start generating plots for the newly created variables.
We will generate a scatterplot and plot life expecrtancy as a function of infant mortality.

```{r}
pt1 <- inf.mort_lf.exp %>% 
  ggplot(aes(life_expectancy, infant_mortality)) + geom_point(color = "black") + geom_smooth(color = "green",method = 'lm') + labs(title = "Figure 1. Life expectancy as a function of infant mortality")  #generate a scatterplot with regression line to demonstrate the positive or negative correlation. 

plot(pt1) #generate the scatterplot.

print(pt1) #print the plot. 
```

As shown in figure 1, there is a negative correlation between infant mortality and life expectancy.

Let's generate another scatterplot by ploting population as a function of life expectancy.

```{r}
pt2 <- pop_lf.exp %>%
  ggplot(aes(population, life_expectancy)) + geom_point(color = "black") + scale_x_log10() + geom_smooth(color = "red", method = 'lm') + labs(title = "Figure 2. Population as a function of life expectancy") #generated a scatterplot with population on the x-axis and life_expectancy on the y-axis.Note: we have set x-axis to log scale. 
plot(pt2) #generate the plot.
print(pt2) # print the plot. 
```

As shown in figure 2, there a not very strong correlation between life expectancy and population.
Note: x-axis is set to log scale.

Figure 2 shows individual streaks of data poits that go together.
This is mainly because the data is collected over many years and each streak represents data from an individual year.

### More data processing:

Determine the number of NA's for infant moratlity.

```{r}
summary(africadata$infant_mortality) #look at the summary for NA's. 
sum(is.na(africadata$infant_mortality)) # total number of NA's in infant mortality column.
```

Create another dataset called missing_df that only contains two variables, Year and infant mortlaity to further investigate the years that have missing data in the infant mortality column.

```{r}
missing_df <- africadata %>% 
  select("year", "infant_mortality")  #variable called missing_df with the variables year and infant mortality.
print(missing_df )  #view the newly created dataset.

missing_df <- missing_df %>% 
  filter(is.na(infant_mortality)) %>%  #filter the NA's from infant mortality variable. 
  select(year) %>%    #select the variable year that corresponds with the NA's in infant mortality column.
  distinct()  #use it to avoid repetition of the same years. 
print(missing_df)  #view the dataset.

year_2000 <- africadata %>%  #select the year 2000 from the year column to further investigate by generating plots. 
  filter(year == 2000)
str(year_2000)  #get overview of the data structure.
summary(year_2000)  #summary of the dataset called year_2000 that has 51 observations and 9 variables. 
```

### More plotting:

We are going to generate scatterplots using the new dataset to further investigate it.

```{r}
pt1.v2 <- year_2000 %>%       #generate a scatterplot of life_expectancy as a function of infant mortality which now holds data for the year 2000 only.
  ggplot(aes(life_expectancy, infant_mortality)) + geom_point(color = "black") + geom_smooth(color = "green", method = 'lm') + labs(title = "Figure 1a. Life expectancy as a function of infant mortality")  #generate scatterplot using this code with a few tweeks in the code to make the plot look better and more colorful. The labs argument is used to add custom titles to the scatterplot.
plot(pt1.v2) #generate the plot. 


pt2.v2 <- year_2000 %>%    #generate a scatterplot of population as a function of life expectancy which now holds data for the year 2000 only with 51 observations.
  ggplot(aes(population, life_expectancy)) + geom_point(color = "black") + scale_x_log10() + geom_smooth(color = "red", method = 'lm') + labs(title = "Figure 2a. Population as a function of life expectancy")   #generate scatterplot using this code with a few tweeks in the code to make the plot look better and more colorful. The argument labs is used to add custom titles to the scatterplot.
plot(pt2.v2)  #generate the plot.
```

### Fitting sample models:

Fit a regession model for the two columns in the year_2000 dataset.
The fit has life expectancy as an outcome and infant mortality as predictor.

```{r}
fit1 <- lm(life_expectancy ~ infant_mortality, data = year_2000) #fit regression model with life expectancy as the outcome and infant mortality as predictor. Note: In the lm function, outcome lies on the left of tilde sign and predictor on the right side.  
summary(fit1) #get the summary of the sample model
```

Based on the p-value (p=2.83\*10\^-8), we conclude that there is strong evidence to reject the null hypothesis, which states that there is no relationship between infant mortality and life expectancy.This analysis shows a strong negative link between infant mortality and life expectancy in the year 2000.
It means that for every extra infant death per 1,000 live births, life expectancy decreases by about 0.19 years (around 2.3 months).

Fit a regression model with life expectancy as outcome and population as predictor from the year_2000 dataset.

```{r}
fit2 <- lm(life_expectancy ~ population, data = year_2000) #fit regession model with life expectancy as outcome and population as predictor.

summary(fit2) #get the summary for the fitted model.
```

In this model, based on the p-value (0.6159), the population variable does not have a significant effect on life expectancy.
Itâ€™s likely not a meaningful predictor for life expectancy in this dataset.

\`\`\`

######################################################################### 

### This section was contributed to by Shaun van den Hurk

We will be working with another dataset from the dslabs package again.
The different datasets that are available in the package can be seen online by viewing the details on CRAN.
The website for the respective PDF with information on different datasets can be found here: https://cran.r-project.org/web/packages/dslabs/dslabs.pdf

We will work with a dataset that evaluates contagious disease data for US states.

```{r}
#Get an overview of the us_contagious_diseases data structure
str(us_contagious_diseases)

#Get a summary of the us_contagious_diseases data
summary(us_contagious_diseases)

#Determine the object class for the us_contagious_diseases dataset
class(us_contagious_diseases)

#View the dataset help file information
help(us_contagious_diseases)

#View the dataset as a whole in the console
print(us_contagious_diseases)

```

We see that there are 16 065 variables and 6 observations,with the main columns being disease, state, year, weeks reporting,count, and population.
We also see some of the diseases in the dataset and some of the associated figures.
We see that the the minimum year in the dataset is 1928 and the maximum is 2011.
Information is reported per week in the year and the total number where cases were reported gives the weeks reporting (from 0 to 52).
The diseases investigated are: Hepatitis A, Measles, Mumps, Pertussis,Polio, Rubella, and Smallpox.

For our evaluations we will focus on a 20-year subset of the data: 1990 - 2010.
We will filter this out of the main dataset and name the new object: us_illness_20y

```{r}
us_illness_20y <- us_contagious_diseases |> filter(year>1989 & year<2011) #Use the filter function to select for the rows that include the years 1990 - 2010

print(us_illness_20y)
```

We want to look if there are any missing (na) values in our selected dataset.

```{r}
us_illness_20y |> filter(if_any(everything(), is.na)) #Filter used, If_any helps to check all columns, and everything applies the is.na function to all the columns.

```

We see that there are no NA values in the dataset and so we do not need to do further data cleaning to address any NA values.

### Further data analysis:

We would like to know how many cases of Hepatitis A there were in 2010 across all States.We will name the result as an assigned object.

```{r}
#First we will create an object with all the Hepatitis A cases in 2010 filtered 
hepatitis_A_2010 <- us_contagious_diseases |>filter(disease=='Hepatitis A' & year==2010) 

#We will now get a sum of all the case counts from the hepatitis cases in 2010
hep_A_2010_count <- sum(hepatitis_A_2010 $count)

```

We see that there were 4060 cases of Hepatitis A in 2010.
We can view our intermediate object that was created "hepatitis_A_2010" and visually see that New York was the State with the highest number of cases.
Of course we could generate code to filter and evaluate this further too.

The code from above can be edited and used to evaluate any other disease and year combination present in the dataset (e.g. Measles and Georgia).

We want to visually see which state had the highest number of Hepatitis A cases in 2010.

```{r}
#Generate a bar chart that displays Hepatitis A case numbers by state from the year 2010
ggplot(data = hepatitis_A_2010, aes(x =state, y =count)) + geom_bar(stat = "identity") + labs(title = "Hepatitis A cases by State in 2010", x = "States", y = "Hepatitis cases") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Use the ggplot function with aes and define the variables, define a bar chart by using geom_bar, add labels with labs, and then specify that the x-axis labels rotate 90 degrees by using the theme function.

```

We would then like to see which year had the highest number of cases of Measles.

We will first filter out the Measles cases and create an object from the filtered cases.
We will then get the total number of cases from all the states per year.
This will then be used to give us the year with the highest number of cases.

```{r}
#Use the filter function and view the results
measles_cases <- us_illness_20y|> filter(disease=='Measles')
summary(measles_cases)
print(measles_cases)

```

From this evaluation we can see that our dataset for the reported measles cases ends in 2002 and not 2010 (or 2011) like the other diseases in the reported dataset.
So our period of evaluation for measles is 1990 to 2002.

From our summary we also see that the max value in the "count" column is 9598, and we could use this to query the state and year with the highest case if we wanted.
But we want the highest number of total cases per year and so will continue with that workflow.

We first want to see which states were actually included in the dataset.
We will use the unique function from the dplyr package to identify these.

```{r}
unique(measles_cases$state)
```

We can see that 51 States are included in the dataset.

We will continue with our process to see the total number of measles cases by year.

```{r}
#We get the total measles cases by grouping the years together and then using the sum function on the count and then summarise these results
measles_total_cases <- measles_cases |> group_by(year) |> summarise(total_cases=sum(count))

print(measles_total_cases)
summary(measles_total_cases)
```

Through the print and summary functions we can see that the year with the highest total number of measles cases was 2002, when there were 21734 cases of measles across all states.

We can display the total measles cases as a line graph to help visualise any patterns.

```{r}
#First we want to make sure that years are seen as a factor/categorical for the plot.
measles_total_cases$year <- as.factor(measles_total_cases$year)

#Plot a line graph with the appropriate variables and labels. Ensure that we have group set as 1 since this is a line plot with factors.
ggplot(data = measles_total_cases, aes(x=year, y= total_cases)) + geom_line(group=1) + labs(title= "Total measles cases for all US states by year", x = "year", y = "Total cases")


```

The graph that we plotted helps to illustrate a decreasing trend in the number of cases of measles at the start of the 1990s.
If we wanted to evaluate this further we could go back to the original dataset and plot the measles cases over a longer time frame.

The same work flow and code can be used and adjusted for different diseases and time frames.

We now acknowledge that raw case numbers might be limited due to differences in population sizes.
For example, New York has a much greater population, and so instead we want to compare the percentage of the population affected (number of cases per the population \*100) which will give us a comparable metric.

We will calculate the percent of the population affected and add this as an additional column to the measles dataset.
We will then order the dataset by the percent affected column to see this visually.

```{r}
#adding an additonal column with the mutate function
measles_percent <- measles_cases|> mutate(percent_affected = count/population*100)

#Reorder the percent of the population affected from highest to lowest
measles_percent_top <- measles_percent |> arrange(desc(percent_affected))

print(measles_percent_top)
```

From this we can see that Idaho in 1991 had the highest value for percent of the population affected by measles.
This was followed by California, Texas, Nevada and the Wisconsin, all in 1990.

We will now run a basic linear regression model to investigate if there is any correlation between the percent of the population that is affected and the population size.

```{r}
#generate a linear model with the highlighted variables
measles_cases_model <- lm(percent_affected ~ population, data = measles_percent)

#display the results of the linear model
summary(measles_cases_model)

```

Based on these results it appears that there is not a statistically significant relationship between the the percent of the population affected by measles and the population size.Although perhaps this could be evaluated over a longer time frame since the bulk of the cases occured within the first few years of 1990s within our filtered dataset.
